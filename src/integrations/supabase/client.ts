// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Load credentials from environment variables with sensible fallbacks.
// These values are injected at build time by Vite when prefixed with `VITE_`.
const SUPABASE_URL =
  (import.meta.env.VITE_SUPABASE_URL as string) ||
  "https://yohlethqxunrvrqkjjsh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY =
  (import.meta.env.VITE_SUPABASE_ANON_KEY as string) ||
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlvaGxldGhxeHVucnZycWtqanNoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY5NzAwMTEsImV4cCI6MjA2MjU0NjAxMX0.krRX1jHct8wVOLm-RrKMTHI5Vt0LcY96ebUSzWKhr70";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: ({
    persistSession: true, // Enable session persistence for better reliability
    autoRefreshToken: true, // Automatically refresh tokens when needed
    detectSessionInUrl: false, // Disable detecting session in URL as we're using Clerk
    storage: localStorage, // Use localStorage for Supabase session
    // Configure the Supabase client to automatically use the Clerk session token
    // The accessToken function will be called by the Supabase client when it needs a token
    accessToken: async () => {
      // This part needs to fetch the current active Clerk session token.
      // The exact method depends on where this client is used and the Clerk setup.
      // If used in a React component with @clerk/clerk-react:
      // import { useSession } from '@clerk/clerk-react';
      // const { session } = useSession();
      // return session?.getToken() ?? null;

      // If used in an Edge Function or serverless function with @clerk/nextjs/server:
      // import { auth } from '@clerk/nextjs/server';
      // return (await auth()).getToken() ?? null;

      // For this shared client file, we need a way to provide the token externally.
      // A common pattern is to initialize the client within a context provider
      // that has access to the Clerk session.
      // However, based on the original `updateSupabaseAuthWithClerkSession`,
      // let's assume a mechanism exists to get the current Clerk token here.
      // **YOU WILL NEED TO REPLACE THIS COMMENT WITH ACTUAL LOGIC**
      // **TO RETRIEVE THE CURRENT CLERK TOKEN.**
      console.warn("Supabase client accessToken function is a placeholder. Implement Clerk token retrieval.");
      return null; // Placeholder - must return the Clerk token or null
    },
  } as any), // Cast the entire auth options object to any to bypass type checking
});

// Remove or adapt the updateSupabaseAuthWithClerkSession function as the accessToken approach is preferred.
// The logic to set the token should be within the accessToken function above.
/*
export const updateSupabaseAuthWithClerkSession = async (
  clerkToken: string | null
) => {
  console.log(
    "Updating Supabase auth with Clerk token:",
    clerkToken ? "Token provided" : "No token"
  );

  try {
    if (clerkToken) {
      // Set the Clerk JWT as the Supabase auth token
      const { data, error } = await supabase.auth.setSession({
        access_token: clerkToken,
        // Use the same value for refresh_token since Clerk doesn't provide one
        refresh_token: clerkToken
      });

      if (error || !data?.session) {
        console.error("Error setting Supabase session:", error);
        return false;
      }

      console.log("Supabase session updated successfully:", data);
      return true;
    } else {
      // Clear the session if no token is provided
      const { error } = await supabase.auth.setSession({
        access_token: "",
        refresh_token: ""
      });

      if (error) {
        console.error("Error clearing Supabase session:", error);
      }

      return false;
    }
  } catch (error) {
    console.error("Exception updating Supabase auth:", error);
    return false;
  }
};
*/
