
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://yohlethqxunrvrqkjjsh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlvaGxldGhxeHVucnZycWtqanNoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY5NzAwMTEsImV4cCI6MjA2MjU0NjAxMX0.krRX1jHct8wVOLm-RrKMTHI5Vt0LcY96ebUSzWKhr70";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true, // Enable session persistence for better reliability
    autoRefreshToken: true, // Automatically refresh tokens when needed
    detectSessionInUrl: false, // Disable detecting session in URL as we're using Clerk
    storage: localStorage // Use localStorage for Supabase session
  }
});

// Ensure the Supabase client has a fresh session using Clerk's JWT token.
// Pass Clerk's `getToken` method from useAuth. This helper is safe to call
// before any operation that relies on RLS.
export const syncSupabaseSession = async (
  getToken: (() => Promise<string | null>) | undefined
): Promise<boolean> => {
  if (!getToken) return false;

  try {
    const token = await getToken({ template: "supabase" });
    if (!token) {
      console.error("syncSupabaseSession: unable to obtain Clerk token");
      return false;
    }

    await updateSupabaseAuthWithClerkSession(token);
    return true;
  } catch (error) {
    console.error("syncSupabaseSession failed:", error);
    return false;
  }
};

// When user is authenticated with Clerk, set their JWT as the supabase token
export const updateSupabaseAuthWithClerkSession = async (clerkToken: string | null) => {
  console.log(
    "Updating Supabase auth with Clerk token:",
    clerkToken ? "Token provided" : "No token"
  );
  
  try {
    if (clerkToken) {
      // Set the Clerk JWT as the Supabase auth token. We don't have a refresh
      // token from Clerk, so reuse the same token to satisfy the Supabase
      // client API.
      const { data, error } = await supabase.auth.setSession({
        access_token: clerkToken,
        refresh_token: clerkToken
      });
      
      if (error) {
        console.error("Error setting Supabase session:", error);
        return false;
      }
      
      console.log("Supabase session updated successfully:", data);
      return true;
    } else {
      // Clear the session if no token is provided
      const { error } = await supabase.auth.signOut();
      if (error) {
        console.error("Error clearing Supabase session:", error);
      }
      return false;
    }
  } catch (error) {
    console.error("Exception updating Supabase auth:", error);
    return false;
  }
};
